
给定N个整数A1, A2, … AN。请你从中选出K个数，使其乘积最大。
请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以1000000009的余数。
注意，如果X<0， 我们定义X除以1000000009的余数是负(-X)除以1000000009的余数。
即：0-((0-x) % 1000000009)
【输入格式】
第一行包含两个整数N和K。
以下N行每行一个整数Ai。
对于40%的数据，1 <= K <= N <= 100
对于60%的数据，1 <= K <= 1000
对于100%的数据，1 <= K <= N <= 100000 -100000 <= Ai <= 100000
【输出格式】
一个整数，表示答案。
【输入样例】
5 3
-100000
-10000
2
100000
10000
【输出样例】
999100009
再例如：
【输入样例】
5 3
-100000
-100000
-2
-100000
-100000
【输出样例】
-999999829
资源约定：
峰值内存消耗（含虚拟机） < 256M
CPU消耗 < 1000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。
注意：
main函数需要返回0;
只使用ANSI C/ANSI C++ 标准;
不要调用依赖于编译环境或操作系统的特殊函数。
所有依赖的函数必须明确地在源文件中 #include
不能通过工程设置而省略常用头文件。
提交程序时，注意选择所期望的语言类型和编译器类型。

思路
将输入的N个数按绝对值大小从大到小排序，将绝对值最大的K个数相乘取模，如果为正数则是正确答案，如果为负数则有以下两种情况：
①将K个数中绝对值最小的正数换成剩下负数中绝对值最大的，换不了则保持原来的数。
②将K个数中绝对值最小的负数换成剩下正数中绝对值最大的，换不了则保持原来的数。
以上两种情况取最大值，最大值如果为正数则是正确答案，如果为负数则需以下操作；
将绝对值最小的K个数相乘取模则是正确答案。

代码

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int main()
{
	int n, k;
	int a[100000] = { 0 };
	int i, j, t;
	long long maxji = 1,maxjit;
	scanf("%d%d", &n, &k);
	for (i = 0; i < n; i++)
		scanf("%d", &a[i]);

	for (i = 1; i < n; i++)//按照绝对值从大到小排序
	{
		j = i;
		while (abs(a[j]) > abs(a[j - 1]) && j > 0)
		{
			t = a[j];
			a[j] = a[j - 1];
			a[j - 1] = t;
			j--;
		}
	}
	for (i = 0; i < k; i++)//取绝对值最大的K个数相乘取模
	{
		maxji = maxji * a[i];
		if (maxji < 0)
		{
			maxji = (-1 * maxji) % 1000000009;
			maxji = -1 * maxji;
		}
		else
			maxji = maxji % 1000000009;
	}
	if (maxji > 0)
		printf("%I64d\n", maxji);
	else
	{
		maxjit = maxji;
		for (i = k; i < n; i++)//第一次换数，在剩下的数中找与第K个数异号的数
		{
			if (a[k - 1] * a[i] < 0)
			{
				maxjit = (maxjit / a[k - 1]) * a[i];
				maxjit = maxjit % 1000000009;
				break;
			}
		}
		for (i = k - 2; i >= 0; i--)//在前K-1个中找与第K个数异号的数，即如果上面是正数换负数则这里是负数换正数
		{
			if (a[k - 1] * a[i] < 0)
				break;
		}
		if(i>=0)//判断是否有该数，如果有则进行换数
		for (j = k; j < n; j++)//第二次换数
		{
			if (a[i] * a[j] < 0)
			{
				maxji = (maxji / a[i]) * a[j];
				maxji = maxji % 1000000009;
				break;
			}
		}
		if (maxji < 0 && maxjit < 0)//如果两种情况都无法换数,即N个数中只有负数
		{
			maxji = 1;
			for (i = n - 1; i > n - 1 - k; i--)//
			{
				maxji = maxji * a[i];
				if (maxji < 0)
				{
					maxji = (-1 * maxji) % 1000000009;
					maxji = -1 * maxji;
				}
				else
					maxji = maxji % 1000000009;
			}
			printf("%I64d\n", maxji);
		}
		else
		{
			maxji = maxji > maxjit ? maxji : maxjit;
			printf("%I64d\n", maxji);
		}
	}
	system("pause");
	return 0;
}
