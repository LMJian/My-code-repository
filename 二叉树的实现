BTree.h

#ifndef _BTREE_H_
#define _BTREE_H_

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef char BTDataType;
typedef struct BinaryTreeNode 
{ 
	BTDataType _data;    
	struct BinaryTreeNode* _left;    
	struct BinaryTreeNode* _right; 
}BTNode;

// 通过前序遍历的数组"ABD##E#H##CF##G##"构建二叉树 
BTNode* BinaryTreeCreate(BTDataType* a);
void BinaryTreeDestory(BTNode** root);

int BinaryTreeSize(BTNode* root); 
int BinaryTreeLeafSize(BTNode* root); 
int BinaryTreeLevelKSize(BTNode* root, int k);

BTNode* BinaryTreeFind(BTNode* root, BTDataType x);
// 遍历 
void BinaryTreePrevOrder(BTNode* root); 
void BinaryTreeInOrder(BTNode* root); 
void BinaryTreePostOrder(BTNode* root);
// 非递归遍历 
// 层序遍历 
void BinaryTreeLevelOrder(BTNode* root); 
// 判断二叉树是否是完全二叉树 
int BinaryTreeComplete(BTNode* root);

void BinaryTreePrevOrderNonR(BTNode* root); 
void BinaryTreeInOrderNonR(BTNode* root); 
void BinaryTreePostOrderNonR(BTNode* root);

void TestBinaryTree();

#endif /*_BTREE_H_*/

BTree.c

#include"BTree.h"

// 通过前序遍历的数组"ABD##E#H##CF##G##"构建二叉树 
BTNode* BinaryTreeCreate(BTDataType* a)
{
	static int i = 0;
	if (a[i] == '#')
	{
		i++;
		return NULL;
	}
	else
	{
		BTNode *node = (BTNode*)malloc(sizeof(BTNode));
		node->_data = a[i];
		i++;
		node->_left = BinaryTreeCreate(a);
		node->_right = BinaryTreeCreate(a);
		return node;
	}
}

main.c

#include"BTree.h"

int main()
{
	BTNode *pt = BinaryTreeCreate("ABD##E#H##CF##G##");
	system("pause");
	return 0;
}
