
你有一张某海域NxN像素的照片，".“表示海洋、”#"表示陆地，如下所示：
…
.##…
.##…
…##.
…####.
…###.
…
其中"上下左右"四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有2座岛屿。
由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。
例如上图中的海域未来会变成如下样子：
…
…
…
…
…#…
…
…
请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。
【输入格式】
第一行包含一个整数N。 (1 <= N <= 1000)
以下N行N列代表一张海域照片。
照片保证第1行、第1列、第N行、第N列的像素都是海洋。
【输出格式】
一个整数表示答案。
【输入样例】
7
…
.##…
.##…
…##.
…####.
…###.
…
【输出样例】
1
资源约定：
峰值内存消耗（含虚拟机） < 256M
CPU消耗 < 1000ms
请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。
注意：
main函数需要返回0;
只使用ANSI C/ANSI C++ 标准;
不要调用依赖于编译环境或操作系统的特殊函数。
所有依赖的函数必须明确地在源文件中 #include
不能通过工程设置而省略常用头文件。
提交程序时，注意选择所期望的语言类型和编译器类型。

思路
当一个陆地的像素点的上下左右的像素点都为陆地时，则不会被淹没，我们由此得到淹没后的像素照片，关键在于怎么数岛屿，这运用到了递归的思想，用两层for循环，当遇到‘#’时岛屿数+1，进入递归，将与此像素点挨着的陆地像素点变为海洋像素点，for循环结束时及得到岛屿数。

代码

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
char a[1000][1000] = { 0 };
char at[1000][1000] = { 0 };
void digui(char a[][1000], int i, int j,int n)
{
	if (a[i][j] == '.')       //在递归中一定要注意赋值，注意出口！！！
		return;
	if (a[i][j] == '#')
		a[i][j] = '.';
	
	if(i+1<n)
	digui(a, i + 1, j,n);
	if(i-1>=0)
	digui(a, i - 1, j,n);
	if(j+1<n)
	digui(a, i, j + 1,n);
	if(j-1>=0)
	digui(a, i, j - 1,n);
}
int main()
{
	int n;
	int i,j,t1=0,t2=0;
	scanf("%d", &n);
	getchar();                        //用于吃掉回车
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			scanf("%c", &a[i][j]);
		getchar();                   //用于吃掉回车
	}
	for (i = 0; i < n; i++)         //海面上升后给陆地像素点赋值
	{
		for (j = 0; j < n; j++)
		{
			if (a[i][j] == '#'&&a[i + 1][j] == '#' && a[i - 1][j] == '#' && a[i][j + 1] == '#' && a[i][j - 1] == '#')
				at[i][j] = a[i][j];
		}
			
	}
	for (i = 0; i < n; i++)       //海面上升后给海洋像素点赋值
	{
		for (j = 0; j < n; j++)
		{
			if (at[i][j] !='#')
				at[i][j] = '.';
		}

	}
	
	for (i = 0; i < n; i++)       //计算海面上升前的岛屿数
	{
		for (j = 0; j < n; j++)
		{
			if (a[i][j] == '#')
			{
				t1++;
				digui(a, i, j,n);
			}
		}
	}
	for (i = 0; i < n; i++)      //计算海面上升后的岛屿数 
	{
		for (j = 0; j < n; j++)
		{
			if (at[i][j] == '#')
			{
				t2++;
				digui(at, i, j, n);
			}
		}
	}
	printf("海面上升前%d\n", t1);
	printf("海面上升后%d\n", t2);
	system("pause");
	return 0;
}
