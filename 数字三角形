问题描述
在数字三角形中寻找一条从顶部到底部的路径,使得路径上所经过的数字之和最大。
路径上的每一步都只能往左下或右下走。只需要求出这个最大和即可,不必给出具体路径。
三角形的行数大于1小于等于100,数字为0-99
输入格式:
5 //表示三角形的行数,接下来输入三角形
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
要求输出最大和

思考
我们可以从倒数第二行开始修改数组元素的值，找到下方两个元素的最大值加上自身，循环结束时，数组【0】【0】的值即为路径数字最大值。

代码
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

int maze[100][100] = { 0 };

int main()
{
	int n;
	int i, j;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j <= i; j++)
		{
			scanf("%d", &maze[i][j]);
		}
	}
	for (i = n - 2; i >= 0; i--)
	{
		for (j = 0; j <= i; j++)
		{
			int t= maze[i + 1][j] > maze[i + 1][j + 1] ? maze[i + 1][j] : maze[i + 1][j + 1];
			maze[i][j] += t;
		}
	}
	printf("%d\n", maze[0][0]);
	system("pause");
	return 0;
}
