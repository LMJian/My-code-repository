描述
给出n个闭整数区间[ai，bi]和n个整数C1，.，cn。
编写一个程序：
从标准输入读取间隔的数目、它们的端点和整数c1、.、cn，
计算具有区间[ai，bi]的至少ci公共元素的整数集Z的最小大小，对于每一个i=1，2，.，n，
将答案写入标准输出。
输入

输入的第一行包含整数n(1<=n<=50000)-间隔数。下面n行描述间隔。输入的(i+1)-第一行包含由单个空格分隔的三个整数ai、bi和ci，使得0<=ai<=bi<=50000和1<=ci<=bi-ai+1。
输出量

输出包含一个整数，等于集合Z的最小大小，对于每一个i=1，2，.，n至少具有区间[ai，bi]的Ci元素。
样本输入

5
3 7 3
8 10 3
6 8 1
1 3 1
10 11 1
样本输出

6

思路
将所有区间按照bi从小到大排序，循环所有区间，从每个区间的bi处向前打点，在坐标轴上打点之前统计这个区间的需要的打点数，循环结束，打点器累加的值即为答案。

代码
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
int p1[50000] = { 0 };//区间起点
int p2[50000] = { 0 };//区间终点
int pn[50000] = { 0 };//插点数
int cout[50000] = { 0 };//坐标轴
void sort(int n)
{
	int i, j, t;
	for (i = 1; i < n; i++)
	{
		j = i;
		while (p2[j] < p2[j - 1] && j>0)
		{
			t = p2[j];
			p2[j] = p2[j - 1];
			p2[j - 1] = t;
			t = p1[j];
			p1[j] = p1[j - 1];
			p1[j - 1] = t;
			t = pn[j];
			pn[j] = pn[j - 1];
			pn[j - 1] = t;
			j--;
		}
	}
}
int count(int p1, int p2)
{
	int sum = 0;
	int i;
	for (i = p1; i <= p2; i++)
	{
		if (cout[i] != 0)
			sum++;
	}
	return sum;
}
int main()
{
	int n;
	int i;
	int p;//在坐标轴上的位置
	int sum = 0;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf("%d%d%d", &p1[i], &p2[i], &pn[i]);
	}
	sort(n);
	for (i = 0; i < n; i++)
	{
		p = p2[i];
		pn[i] -= count(p1[i], p2[i]);
		while (pn[i] > 0)
		{
			if (cout[p] == 0)
			{
				cout[p] = 1;
				sum++;
				pn[i]--;
			}
			p--;
		}
	}
	printf("%d\n", sum);
	system("pause");
	return 0;
}
