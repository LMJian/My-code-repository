2,3,5,7,11,13,…是素数序列。
类似：7,37,67,97,127,157 这样完全由素数组成的等差数列，叫等差素数数列。
上边的数列公差为30，长度为6。
2004年，格林与华人陶哲轩合作证明了：存在任意长度的素数等差数列。
这是数论领域一项惊人的成果！
有这一理论为基础，请你借助手中的计算机，满怀信心地搜索：
长度为10的等差素数列，其公差最小值是多少？
注意：需要提交的是一个整数，不要填写任何多余的内容和说明文字。

算法设计与分析

难度首先在于如何找公差，如何找等差数列的起点，这里运用了素数的6定理，即除过2，3素数，其余素数都在6N-1和6N+1的位置上，由此我们可以大致知道公差肯定是6的倍数，数列的起点也在6的倍数附近，运用循环即可求解

代码

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int sushu(int n)
{
	int t = 1, i;
	for (i = 3; i <= sqrt(n); i = i + 2)
	{
		if (n%i == 0)
		{
			t = 0;
			break;
		}
	}
	return t;
}
int main()
{
	int i, j, k, t,s;
	for (i = 6; i < 1000; i = i + 6)//公差为6的倍数
	{
		for (j = 6; j < 100000; j = j + 6)//数列的起点存在于6n+1和6n-1的位置上
		{
			if (sushu(j-1) == 1)
			{
				t = 1;
				for (k = 1; k < 10; k++)
				{
					if (sushu(j -1+ i * k) == 0)
					{
						t = 0;
						break;
					}
				}
				if (t == 1)
				{
					printf("%d ", i);
					break;
				}
					
			}
			if (sushu(j + 1) == 1)
			{
				s = 1;
				for (k = 1; k < 10; k++)
				{
					if (sushu(j +1+ i * k) == 0)
					{
						s = 0;
						break;
					}
				}
				if (s == 1)
				{
					printf("%d ", i);
					break;
				}	
			}
		}
		if (t == 1||s==1)
			break;
	}
	system("pause");
	return 0;
}
