
X星球的机器人表演拉拉队有两种服装，A和B。
他们这次表演的是搭机器人塔。

类似：

     A
    B B
   A B A
  A A B B
 B B B A B
A B A B B A

队内的组塔规则是：

A 只能站在 AA 或 BB 的肩上。
B 只能站在 AB 或 BA 的肩上。

你的任务是帮助拉拉队计算一下，在给定A与B的人数时，可以组成多少种花样的塔。

输入一行两个整数 M 和 N，空格分开（0<M,N<500）,分别表示A、B的人数，保证人数合理性。

要求输出一个整数，表示可以产生的花样种数。

例如：
用户输入：
1 2

程序应该输出：
3

再例如：
用户输入：
3 3

程序应该输出：
4

资源约定：
峰值内存消耗 < 256M
CPU消耗 < 1000ms

请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。

注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include ， 不能通过工程设置而省略常用头文件。

提交时，注意选择所期望的编译器类型。
思考
底层确定了，上面怎么排放也就确定了，我们可以dfs最底层，再利用简单的dp求解，国赛很强调时间复杂度，如果全部dfs最多得分超不过30%。
代码

#include<stdio.h>
#include<stdlib.h>

int m, n;
char arr[45][45] = { 0 };
int len;
long long count = 0;

void Dp(int a,int b,int room)
{
	int i,j;
	for(i=1;i<=room;i++)
	{
		for(j=0;j<room+1-i;j++)
		{
			if(arr[i-1][j]==arr[i-1][j+1])
			{
				arr[i][j]='A';
				a--;
			}
			else
			{
				arr[i][j]='B';
				b--;
			}
				if(a<0||b<0)
				return;
		}
	}
	count++;
	return;
}
void dfs(int x, int a, int b,int room)//只dfs最底层 
{
	if(a<0||b<0)
	return;
	if(x==room)
	{
		Dp(a,b,room-1);
		return;
	}

		arr[0][x] = 'A';//摆放A 
			dfs(x + 1, a - 1, b, room);
		arr[0][x] = 0;

		arr[0][x] = 'B';//摆放B 
			dfs(x + 1, a, b - 1, room);
		arr[0][x] = 0;
}
int floor(int num)
{
	int i;
	for (i = 1;; i++)
	{
		num -= i;
		if (num <= 0)
			return i;
	}
}
int main()
{
	scanf("%d%d", &m, &n);
	len = floor(m + n);
	dfs(0, m, n, len);
	printf("%I64d\n", count);
	return 0;
}
