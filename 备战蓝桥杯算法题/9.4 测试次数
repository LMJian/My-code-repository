
x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。
各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。

x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。

如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。
特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。
如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n

为了减少测试次数，从每个厂家抽样3部手机参加测试。

某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？

请填写这个最多测试次数。

注意：需要填写的是一个整数，不要填写任何多余内容。

public class Main {
	public static void main(String[] args) {
		System.out.println(getTimes(1000, 3));
	}

	/**
	 * 获得测试次数
	 * @param m	楼层数
	 * @param n	手机数量
	 * @return times  测试次数k
	 */
	public static int getTimes(int m,int n) {
		//存放当前n部手机测试结果
		int current[] = new int[m+1];
		//存放n-1部手机的测试结果
		int pre[] = new int[m+1];
		//current初始化，同时存入一部手机的测试数据
		for(int i=0;i<m+1;i++){
			current[i] = i;
		}
		int times = 0;
		//两部及两部以上的测试情况
		for(int i=2;i<=n;i++){
			pre = current.clone();
			
			for (int k = 1; k <= m; k++) {
				current[k] = pre[k-1]+1+current[k-1];
				if (current[k] >= m) {
					//使用变量times存放k值
					times = k;
					//跳出循环块
					break;
				}
			}
		}
		return times;
	}
}
