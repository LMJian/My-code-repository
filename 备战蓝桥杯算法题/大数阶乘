问题描述
输入一个正整数n，输出n!的值。
　　其中n!=123*…*n。
算法描述
　　n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。
　　将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。
　　首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。
输入格式
　　输入包含一个正整数n，n<=1000。
输出格式
　　输出n!的准确值。
样例输入
10
样例输出
3628800

自己的思路
#include<stdio.h>
#include<math.h>
#include<string.h>
int main()
{
	int a[10000]={1};
	int n,i,j,len=1;
	scanf("%d",&n);
	
	for(i=1;i<=n;i++)
	{
		for(j=0;j<len;j++) 
			a[j]=a[j]*i;
		for(j=0;j<len;j++) 	
			if(a[j]>9)
			{
				a[j+1]+=a[j]/10;
				a[j]=a[j]%10;
				if(j==len-1)
				len++;
			}
	}
	for(i=len-1;i>=0;i--)
	printf("%d",a[i]);
	printf("\n");
	return 0;
}
老师讲解的代码
#include<stdio.h>

void fac(int i, int *len, int a[])
{
	int k,temp, jw = 0;
	for (k = 0; k <= *len; k++)
	{
		temp=a[k]*i+jw;
		a[k] = temp % 10;
		jw = temp / 10;
	}
	while (jw)
	{
		a[k] = jw%10;
		jw = jw / 10;
		k++;
	}
	*len = k - 1;
}

int main()
{
	int n, i, len = 0,a[10000] = { 1 };//len为阶乘数组的最大下标 
	scanf("%d", &n);
	for (i = 2; i <= n; i++)
		fac(i,&len,a);

	for (i = len; i >= 0; i--)
		printf("%d", a[i]);
	printf("\n");
	return 0;
}
