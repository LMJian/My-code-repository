
小明维护着一个程序员论坛。现在他收集了一份"点赞"日志，日志共有N行。其中每一行的格式是：

ts id

表示在ts时刻编号id的帖子收到一个"赞"。

现在小明想统计有哪些帖子曾经是"热帖"。如果一个帖子曾在任意一个长度为D的时间段内收到不少于K个赞，小明就认为这个帖子曾是"热帖"。

具体来说，如果存在某个时刻T满足该帖在[T, T+D)这段时间内(注意是左闭右开区间)收到不少于K个赞，该帖就曾是"热帖"。

给定日志，请你帮助小明统计出所有曾是"热帖"的帖子编号。

【输入格式】
第一行包含三个整数N、D和K。
以下N行每行一条日志，包含两个整数ts和id。

对于50%的数据，1 <= K <= N <= 1000
对于100%的数据，1 <= K <= N <= 100000 0 <= ts <= 100000 0 <= id <= 100000

【输出格式】
按从小到大的顺序输出热帖id。每个id一行。

【输入样例】
7 10 2
0 1
0 10
10 10
10 1
9 1
100 3
100 3

【输出样例】
1
3

资源约定：
峰值内存消耗（含虚拟机） < 256M
CPU消耗 < 1000ms

请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
不要使用package语句。不要使用jdk1.7及以上版本的特性。
主类的名字必须是：Main，否则按无效代码处理。


package main;

import java.util.ArrayList;
import static java.util.Collections.sort;
import java.util.Scanner;

public class Main {
    public static void main(String[] args){
        // TODO code application logic here
        Scanner input=new Scanner(System.in);
        int N=input.nextInt();
        int D=input.nextInt();
        int K=input.nextInt();
        final int MAX=100001;
        boolean[] maze=new boolean[MAX];
        ArrayList<Obj>[] tsList=new ArrayList[MAX];
        Obj obj;
        for(int i=0;i<N;i++)
        {
            int ts=input.nextInt();
            int id=input.nextInt();
            obj=new Obj();
            obj.ts=ts;
            obj.amount=1;
            maze[id]=true;
            if(tsList[id]==null)
                tsList[id]=new ArrayList<Obj>();
            tsList[id].add(obj);
        }
        ArrayList<Obj> list;
        for(int i=0;i<MAX;i++)
        {
            if(!maze[i]) continue;
            list=(ArrayList<Obj>)tsList[i].clone();
            sort(list);
            boolean key=false;
            for(int j=0;j<list.size();j++)
            {
                for(int m=list.size()-1;m>=j;m--)
                {
                    if(list.get(m).ts-list.get(j).ts<D&&m-j+1>=K)
                    {
                        key=true;
                        break;
                    }
                }
                if(key)
                {
                    System.out.println(i);
                    break;
                }
                    
            }
         }
    }
    public static class Obj implements Comparable<Obj>{
        public int ts;
        public int amount;
        Obj()
        {
            ts=0;
            amount=0;
        }
        @Override
        public int compareTo(Obj o)
        {
            if(ts>o.ts)
                return 1;
            else if(ts<o.ts)
                return -1;
            else
                return 0;
        }
    }
}
