问题描述
输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。

算法描述
　　由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。
　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。
　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。
　　最后将C输出即可。

输入格式
　　输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。
输出格式
　　输出一行，表示a + b的值。

样例输入
20100122201001221234567890
2010012220100122
样例输出
20100122203011233454668012

代码
#include<stdio.h>
#include<string.h>
int main()
{
	int i,alen,blen;
	char a[100],b[100],c[101]={0};//c的初始化不懂 ，为什么不是{‘0’}，而且两种初始化结果不同 
	scanf("%s%s",a,b);//输入时为什么不需要&？？？ 加上&也是可以的 
	alen=strlen(a);
	blen=strlen(b);
	for(i=0;i<alen||i<blen;i++)
	{
		if(i<alen)
		c[i]+=a[alen-1-i]-'0';//注意数组a和b的个位下标并不是0 
		if(i<blen)
		c[i]+=b[blen-1-i]-'0';
		if(c[i]>=10)
		{
		c[i+1]=c[i]/10;
		c[i]=c[i]%10;
		}
	}
	if(blen>alen)
	alen=blen;
	if(c[alen]>0)
	printf("%d",c[alen]);//为什么输出是%d 
	for(i=alen-1;i>=0;i--)
	printf("%d",c[i]);
	return 0;
}	
