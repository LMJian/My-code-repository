SList.h

#ifndef _SLIST_H_
#define _SLIST_H_

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

// 1、无头单向非循环链表增删查改实现
typedef int SLTDataType;
typedef struct SListNode
{
	SLTDataType _data;
	struct SListNode* _next;
}SListNode;
typedef struct SList
{
	SListNode* _head;
}SList;
void SListInit(SList* plist);
void SListDestory(SList* plist);
SListNode* BuySListNode(SLTDataType x);
void SListPushFront(SList* plist, SLTDataType x);
void SListPopFront(SList* plist);
SListNode* SListFind(SList* plist, SLTDataType x);
// 在pos的后面进行插入
void SListInsertAfter(SListNode* pos, SLTDataType x);
// 在pos的前面进行插入
void SListEraseAfter(SListNode* pos);
void SListRemove(SList* plist, SLTDataType x);
void SListPrint(SList* plist);


#endif/*_SLIST_H_*/

SList.c

#include"SList.h"

void SListInit(SList* plist)
{
	plist->_head = NULL;
}
void SListDestory(SList* plist)//销毁
{
	if (plist->_head!= NULL)
	{
		SListNode* pt = plist->_head;
		while (pt!= NULL)
		{
			SListNode* t = pt;
			pt = pt->_next;
			free(t);
		}
		plist->_head = NULL;
	}
}
SListNode* BuySListNode(SLTDataType x)//创建结点
{
	SListNode* pt;
	pt = (SListNode*)malloc(sizeof(SListNode));
	if (pt == NULL)
	{
		printf("创建结点失败\n");
		return NULL;
	}
	pt->_data = x;
	pt->_next = NULL;
	return pt;
}
void SListPushFront(SList* plist, SLTDataType x)//头插
{
	SListNode* node = BuySListNode(x);
	if (node != NULL)
	{
		node->_next = plist->_head;
		plist->_head = node;
	}
}
void SListPopFront(SList* plist)//头删
{
	if (plist->_head != NULL)
	{
		SListNode* pt = plist->_head;
		plist->_head = pt->_next;
		free(pt);
	}
}
SListNode* SListFind(SList* plist, SLTDataType x)//查询指定值
{
	SListNode* pt = plist->_head;
	while (pt!= NULL)
	{
		if (pt->_data == x)
			return pt;
		else
			pt = pt->_next;
	}
	return NULL;
}

void SListInsertAfter(SListNode* pos, SLTDataType x)//后插
{
	SListNode* node = BuySListNode(x);
	node->_next = pos->_next;
	pos->_next = node;
}

void SListEraseAfter(SListNode* pos)//删除pos+1位置结点
{
	SListNode* pt = pos->_next;
	pos->_next = pos->_next->_next;
	free(pt);
}
void SListRemove(SList* plist, SLTDataType x)//删除值为x的结点
{
	if (plist->_head->_data == x)
	{
		SListNode* ph = plist->_head;
		plist->_head = ph->_next;
		free(ph);
	}
	SListNode* ph = plist->_head;
	SListNode* pt = ph->_next;
	while (pt != NULL)
	{
		if (pt->_data == x)
		{
			pt = pt->_next;
			SListEraseAfter(ph);
			ph->_next = pt;
			continue;
		}
		pt = pt->_next;
		ph = ph->_next;
	}
}
void SListPrint(SList* plist)
{
	SListNode* pt = plist->_head;
	while (pt != NULL)
	{
		printf("%d ", pt->_data);
		pt = pt->_next;
	}
	printf("\n");
}

main.c

#include"SList.h"

int main()
{
	SList test;
	SListInit(&test);
	SListPushFront(&test, 1);
	SListPushFront(&test, 5);
	SListPushFront(&test, 3);
	SListNode* pt = test._head->_next->_next;
	SListInsertAfter(pt, 5);
	SListInsertAfter(pt, 5);
	SListInsertAfter(pt, 6);
	SListPrint(&test);
	SListRemove(&test, 5);
	SListPrint(&test);
	system("pause");
	return 0;
}
